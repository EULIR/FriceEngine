group 'org.frice'
version '1.7.10'

buildscript {
	ext.kotlin_version = '1.2.0'
	ext.dokka_version = '0.9.15'

	repositories {
		jcenter()
		mavenCentral()
	}

	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
		classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
	}
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	flatDir { dirs 'lib' }
}

sourceSets {
	main.kotlin.srcDirs += 'src'
	main.java.srcDirs += 'src'
	main.resources.srcDirs += 'res'
	test.kotlin.srcDirs += 'test'
	test.java.srcDirs += 'test'
}

configurations { library }

dependencies {
	compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
	compile group: 'org.jetbrains', name: 'annotations', version: '15.0'
	library name: 'jl1.0.1'
	library name: 'mp3spi1.9.5'
	library name: 'tritonus_share'

	configurations.compile.extendsFrom(configurations.library)

	testCompile group: 'junit', name: 'junit', version: '4.12'
	testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
}

//noinspection GroovyAssignabilityCheck
tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

jar { from { configurations.library.collect { it.isDirectory() ? it : zipTree(it) } } }

task fatJar(type: Jar) {
	classifier = 'all'
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

dokka {
	includes = ['LICENSE', 'README.md']
	// samples = ['test/org/frice/Test.kt', 'test/org/frice/JfxTest.kt']
	impliedPlatforms = ['JVM']

	jdkVersion = 8

	skipDeprecated = false
	reportNotDocumented = true
	noStdlibLink = false

	linkMapping {
		dir = 'src'
		url = 'https://github.com/icela/FriceEngine/blob/master/src'
		suffix = '#L'
	}

	externalDocumentationLink { url = new URL("https://icela.github.io/") }
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
	outputFormat = 'html'
	outputDirectory = javadoc.destinationDir
}

task javadok(type: Jar, dependsOn: dokkaJavadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives fatJar
	archives sourcesJar
	archives javadok
}
